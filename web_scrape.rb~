def calc_day_seconds(day_num, time_str)
  # time = Time.now  # this is actual var, program should be run on a sunday
  time = Time.new(2013, 12, 1)  # this var is for testing

  # adjust day seconds according to day of the week
  day_seconds = 60*60*24
  time += day_seconds*day_num
  return time
end

 # analyze "from"
def analyze_from(from, word_from)

  if /Open/.match(word_from)
    from += (60*60*11)   # from=11am if time=Open
  else
    time_from = word_from.partition(":") # get the hour
    hour = time_from[0].to_i
    hour += 12 if /pm/.match(word_from)   # adjust hour if pm
    from += (60*60*hour)
  end
  return from
end
  
  # analyze "to"
def analyze_to(to, word_to)
  if /Close/.match(word_to)
    to += (60*60*26)    # to=2am if time=Close
  else
    time_to = word_to.partition(":") # get the hour
    hour = time_to[0].to_i
    if /pm/.match(word_to)
      hour += 12
    else # then it must be am, make it the next day
      hour += 24
    end
    to += (60*60*hour)
  end
  return to
end

def find_todays_deals(day, day_number)
  
  url = "http://www.uweekly.com/schedule/drinkplan/" + day
  response = ''
  
  todays_deals = Hash.new(0) # this hash will hold the drink specials data
  
  html = open(url) 
  response = html.read
  
  # Rdoc: http://code.whytheluckystiff.net/hpricot/
  doc = Event.hpricot(response)
  
  # iterate divs of each bussiness
  (doc/"/html/body/div[3]/div/div/div/div[3]/div").each do |buss_block|
    buss_name = (buss_block/"/h2/a").inner_html  # name of bussiness# name of bussiness
    #puts buss_name     
    todays_deals[ buss_name ] = []  # add bussiness in hash  

    # iterate through specials
    (buss_block/"/p/span").each do |raw_special|
      
      # special variable: [0]=special, [1]=<span>(, [2]= from-to)</span>
      special = (raw_special.inner_html).partition(" <span>(")
      #puts special[0]  # special
      
      # raw_time variable: [0]=, [1]=(, [2]=to-from)
      raw_time = ((raw_special/"/span").inner_html).partition("(")
      # raw_time2: [0]=from, [1]=-, [2]=to)
      raw_time2 = raw_time[2].partition(" - ")  
      raw_time2[2].chomp!(")")
      
      zero_hour = calc_day_seconds(day_number, day)
      
      #puts raw_time2[0] # from
      from = analyze_from(zero_hour, raw_time2[0])
      #puts from
      
      #puts raw_time2[2] # to
      to = analyze_to(zero_hour, raw_time2[2])
      #puts to

      todays_deals[buss_name] << [special[0], to, from]
      
    end
  end
  
  todays_deals
end

def run_scrape
  # file names correspond to days of the week
  days = [ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ]    # sun=0, mon=1,...
  specials = Array.new   # each array item contains specials for that day_number

  7.times do |day_number|
    specials[day_number] = find_todays_deals(days[day_number], day_number)
  end
  
  specials.each do |day|
    day.each_pair do |name, spec|
      loc = Location.find_or_create_by(name: name)
      $stderr.puts "Special size: #{spec.size}"
      size = spec.size
      spec.each do |single|
        $stderr.puts "TESTING ==============================================="
        Event.create!(name: single[0], day: days[specials.index(day)], start: single[1].strftime("%H:%M"), end: single[2].strftime("%H:%M"), location_id: loc.id)
      end
    end
  end
  size
end
